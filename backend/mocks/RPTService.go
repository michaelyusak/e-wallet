// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "e-wallet/entity"

	mock "github.com/stretchr/testify/mock"
)

// RPTService is an autogenerated mock type for the RPTService type
type RPTService struct {
	mock.Mock
}

// RequestToken provides a mock function with given fields: ctx, rptReq
func (_m *RPTService) RequestToken(ctx context.Context, rptReq entity.ResetPasswordToken) (*entity.ResetPasswordToken, error) {
	ret := _m.Called(ctx, rptReq)

	if len(ret) == 0 {
		panic("no return value specified for RequestToken")
	}

	var r0 *entity.ResetPasswordToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ResetPasswordToken) (*entity.ResetPasswordToken, error)); ok {
		return rf(ctx, rptReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ResetPasswordToken) *entity.ResetPasswordToken); ok {
		r0 = rf(ctx, rptReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ResetPasswordToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ResetPasswordToken) error); ok {
		r1 = rf(ctx, rptReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, resetPwdReq
func (_m *RPTService) ResetPassword(ctx context.Context, resetPwdReq entity.ResetPasswordToken) error {
	ret := _m.Called(ctx, resetPwdReq)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ResetPasswordToken) error); ok {
		r0 = rf(ctx, resetPwdReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRPTService creates a new instance of RPTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRPTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RPTService {
	mock := &RPTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
