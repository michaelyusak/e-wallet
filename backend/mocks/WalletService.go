// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "e-wallet/entity"

	mock "github.com/stretchr/testify/mock"
)

// WalletService is an autogenerated mock type for the WalletService type
type WalletService struct {
	mock.Mock
}

// Topup provides a mock function with given fields: ctx, topupReq
func (_m *WalletService) Topup(ctx context.Context, topupReq entity.Transaction) error {
	ret := _m.Called(ctx, topupReq)

	if len(ret) == 0 {
		panic("no return value specified for Topup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Transaction) error); ok {
		r0 = rf(ctx, topupReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transfer provides a mock function with given fields: ctx, transferReq
func (_m *WalletService) Transfer(ctx context.Context, transferReq entity.Transaction) error {
	ret := _m.Called(ctx, transferReq)

	if len(ret) == 0 {
		panic("no return value specified for Transfer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Transaction) error); ok {
		r0 = rf(ctx, transferReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWalletService creates a new instance of WalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletService(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletService {
	mock := &WalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
