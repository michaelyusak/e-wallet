// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// HashHelperIntf is an autogenerated mock type for the HashHelperIntf type
type HashHelperIntf struct {
	mock.Mock
}

// CheckPassword provides a mock function with given fields: pwd, hash
func (_m *HashHelperIntf) CheckPassword(pwd string, hash []byte) (bool, error) {
	ret := _m.Called(pwd, hash)

	if len(ret) == 0 {
		panic("no return value specified for CheckPassword")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (bool, error)); ok {
		return rf(pwd, hash)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) bool); ok {
		r0 = rf(pwd, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(pwd, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashPassword provides a mock function with given fields: pwd
func (_m *HashHelperIntf) HashPassword(pwd string) ([]byte, error) {
	ret := _m.Called(pwd)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(pwd)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(pwd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pwd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHashHelperIntf creates a new instance of HashHelperIntf. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashHelperIntf(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashHelperIntf {
	mock := &HashHelperIntf{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
