// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "e-wallet/entity"

	mock "github.com/stretchr/testify/mock"
)

// GameService is an autogenerated mock type for the GameService type
type GameService struct {
	mock.Mock
}

// AttemptGacha provides a mock function with given fields: ctx, selectionStr
func (_m *GameService) AttemptGacha(ctx context.Context, selectionStr string) (*entity.GachaBox, error) {
	ret := _m.Called(ctx, selectionStr)

	if len(ret) == 0 {
		panic("no return value specified for AttemptGacha")
	}

	var r0 *entity.GachaBox
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.GachaBox, error)); ok {
		return rf(ctx, selectionStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.GachaBox); ok {
		r0 = rf(ctx, selectionStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.GachaBox)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, selectionStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGameService creates a new instance of GameService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GameService {
	mock := &GameService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
