// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "e-wallet/entity"

	mock "github.com/stretchr/testify/mock"

	repository "e-wallet/repository"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetUserById(ctx context.Context, userId int) (*entity.User, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.User, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.User); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostOneUser provides a mock function with given fields: ctx, userReq
func (_m *UserRepository) PostOneUser(ctx context.Context, userReq entity.User) (*entity.User, error) {
	ret := _m.Called(ctx, userReq)

	if len(ret) == 0 {
		panic("no return value specified for PostOneUser")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) (*entity.User, error)); ok {
		return rf(ctx, userReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) *entity.User); ok {
		r0 = rf(ctx, userReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = rf(ctx, userReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, userId, hashPwd
func (_m *UserRepository) ResetPassword(ctx context.Context, userId int, hashPwd []byte) error {
	ret := _m.Called(ctx, userId, hashPwd)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []byte) error); ok {
		r0 = rf(ctx, userId, hashPwd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfilePicture provides a mock function with given fields: ctx, userId, imagePath
func (_m *UserRepository) UpdateProfilePicture(ctx context.Context, userId int, imagePath string) error {
	ret := _m.Called(ctx, userId, imagePath)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfilePicture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, userId, imagePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserEmail provides a mock function with given fields: ctx, userReq
func (_m *UserRepository) UpdateUserEmail(ctx context.Context, userReq entity.User) error {
	ret := _m.Called(ctx, userReq)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, userReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserName provides a mock function with given fields: ctx, userReq
func (_m *UserRepository) UpdateUserName(ctx context.Context, userReq entity.User) error {
	ret := _m.Called(ctx, userReq)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, userReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTx provides a mock function with given fields: ctx, fn
func (_m *UserRepository) WithTx(ctx context.Context, fn func(repository.UserRepository) (*entity.User, error)) (*entity.User, error) {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(repository.UserRepository) (*entity.User, error)) (*entity.User, error)); ok {
		return rf(ctx, fn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(repository.UserRepository) (*entity.User, error)) *entity.User); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(repository.UserRepository) (*entity.User, error)) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
