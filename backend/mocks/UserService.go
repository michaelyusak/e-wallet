// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "e-wallet/entity"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// GetDetail provides a mock function with given fields: ctx
func (_m *UserService) GetDetail(ctx context.Context) (*entity.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDetail")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*entity.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *entity.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, userReq
func (_m *UserService) Login(ctx context.Context, userReq entity.User) (string, error) {
	ret := _m.Called(ctx, userReq)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) (string, error)); ok {
		return rf(ctx, userReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) string); ok {
		r0 = rf(ctx, userReq)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = rf(ctx, userReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, userReq
func (_m *UserService) RegisterUser(ctx context.Context, userReq entity.User) (*entity.User, string, error) {
	ret := _m.Called(ctx, userReq)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *entity.User
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) (*entity.User, string, error)); ok {
		return rf(ctx, userReq)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) *entity.User); ok {
		r0 = rf(ctx, userReq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.User) string); ok {
		r1 = rf(ctx, userReq)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, entity.User) error); ok {
		r2 = rf(ctx, userReq)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateProfilePicture provides a mock function with given fields: ctx, uploadedImage, fileHeader
func (_m *UserService) UpdateProfilePicture(ctx context.Context, uploadedImage multipart.File, fileHeader *multipart.FileHeader) error {
	ret := _m.Called(ctx, uploadedImage, fileHeader)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfilePicture")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, multipart.File, *multipart.FileHeader) error); ok {
		r0 = rf(ctx, uploadedImage, fileHeader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserData provides a mock function with given fields: ctx, userReq
func (_m *UserService) UpdateUserData(ctx context.Context, userReq entity.User) error {
	ret := _m.Called(ctx, userReq)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) error); ok {
		r0 = rf(ctx, userReq)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
